Ref#,Snowball,Year,Title,Authors,Goal,Summary,Technique,Abstraction,Privacy Design Strategy (Hoepman),Threat to Mitigate (LINDDUN),Programming Languages,Implementation Language,Open Source Tool/Code,Advantages,Limitations,Evaluation,Themes
1,NO,2018,Tailoring Taint Analysis to GDPR,Ferrara P.; Olivieri L.; Spoto F.,analyze,"The goal to detect which data is being disclosed to which leaking points. For this, one must specify (i) what types of sensitive data and leakage points exist; (ii) how sensitive data can be accessed and leaked; and (iii) a GDPR policy that specifies the data flows that are allowed or forbidden. This is a continuation of [2].",Extended taint analysis (for of static analysis) to detect potential leackages of personal data. Backward flow reconstruction to detect the source of tainted data.,Data Flow Gaph/Diagram,N/A,Data Disclosure,Java,Julia,NO,,One must manually define sets of sensitive data and leackage points. This is context dependent. False alarms to be removed manually (no data sanitizers are considered during the analysis). Backward flow reconstruction is not scalable.,Proof of concept. No benchmark evaluation,"ANALYZE, STATIC TAINT ANALYSIS, DATA FLOW GRAPH, DATA DISCLOSURE, MANUAL EFFORT, PROOF OF CONCEPT, GENERALIZABILITY"
3,NO,2020,Annotation-based static analysis for personal data protection,Hjerppe K.; Ruohonen J.; Leppänen V.,analyze,"For these reasons, the tool presented augments AST inspection with personal data annotations. A semantic flow analysis is achieved thanks to the annotations and some semantic rules.","Static Analysis. Design of annotating classes and functions that process personal data. For this, it borows concepts from LPL (Layered Privacy Language) and provides some simple semantic rules",Abstract Syntax Tree,N/A,Data Disclosure,Java,Java,https://github.com/devgeniem/personaldataflow,The analysis can focus on units of code rather than the whole system. Integrated to Eclipse IDE.,"Requires manual annotations (personal data, data handler, and endpoints). The rules defined cover typical cases of processing personal data. Do not consider, for instance, data agregation or likability issues. Only classes can be annotated but not primitive values. Allowed execution flows (exceptions) are not taken into consideration.",Proof of concept. No benchmark evaluation,"ANALYZE, STATIC TAINT ANALYSIS, ABSTRACT SYNTAX TREE, DATA DISCLOSURE, MANUAL EFFORT, AD-HOC DATASET, GENERALIZABILITY"
4,NO,2021,TIRA: An OpenAPI Extension and Toolbox for GDPR Transparency in RESTful Architectures,Grunewald E.; Wille P.; Pallas F.; Borges M.C.; Ulbricht M.-R.,analyze,The goal is to enhance transparency during data processing by RESTful applications. The approach targets microservices.,"Extension of OpenAPI specifications with transparency-related annotations (vocabulary and schema extension). Plus, a set of higher-order tools for aggregating respective information across multiple interdependent services.",NONE,N/A,Unawareness (Transparency) and Data Disclosure,OpenAPI specifications,Ruby,https://github.com/PrivacyEngineering/tira/tree/main,Allows for transparency monitoring in Cointinuous Integration environments. Scalable to microservice architectures. Works as an OpenAPI extension (standarized). Explicitly address usability issues,"Requires manual annotations. The analysis is performed on an interface level only (API), not over source code.",Proof of concept. No benchmark evaluation,"ANALYZE, NAMED ENTITY RECOGNITION, UNAWARENESS, DATA DISCLOSURE, MANUAL EFFORT, PROOF OF CONCEPT, GENERALIZABILITY"
7,NO,2022,A Framework for Scanning Privacy Information based on Static Analysis,Zhao Y.; Yi G.; Liu F.; Hui Z.; Zhao J.,analyze,"This involves a two-step method. One the one hand, they use advanced NLP techniques to extract privacy-related statements from policies (statement=keywords+scenario). Then, they analyse the code to identify private information flows. This is done with a combination of Abstract Syntax Trees (ASTs) and call graphs. A call graph describes the calling relationships between subroutines in a computer program. The AST can help to obtain privacy variables, and the call graph can help us to obtain the privacy delivery path.",Static Analysis. Extraction of private information ,Abstract Syntax Trees and Call Graphs,N/A,Data Disclosure and Non Compliance,Python,Python,https://github.com/GLY-CETest/A-framework-for-Scanning-Privacy-Information-based-on-Static-Analysis,Automatic labelling of privacy-relevant variables. Alegged scalability,"The privacy-related variables in code are extracted through a similarity metric that compares the name of the variable against a list of privacy keywords extracted from the policy. This assumes that there will be variables with a representative name, aligned with the policy. ",7 privacy-related projects code from real open source projects,"ANALYZE, STATIC TAINT ANALYSIS, ABSTRACT SYNTAX TREE, CALL GRAPHS, DATA DISCLOSURE, NON-COMPLIANCE, PROOF OF CONCEPT, GENERALIZABILITY, AD-HOC DATASET"
9,YES,2022,Scalable Discovery and Continuous Inventory of Personal Data at Rest in Cloud Native Systems,Grunewald E.; Schurbert L.,analyze,"The goal is to create an inventory of personal data in large-scale cloud-native systems. For that, they extract connection details to datastores included in Infraestructure as Code (IaC) files. This information is then used to fetch data and metadata from these datastores, which will be further scrutinised for private data.","This is mostly analysing IaC code to retreive dataset connection calls. They use that to fetch information from the dataset and search for private data stored in them. No much is said anbout the analysis of IaC files, perhaps because it is quite trivial.  Most of the effort goes to the analysis of the database schemas. Several commercial tools are already available for this.",NONE,N/A,Data Disclosure and Non Compliance,IaC Specifications (YAML),Python,https://github.com/teiresias-personal-data-discovery,Works for distributed systems. Scalable.,"Significant number of false positive cases in the identification of personal data. The analysis is on the databases, not on code",Beanchmark comparision against AWS Macie and Google CDLP. The assessment was conducted on two synthetic datasets and a random excerpt from a real one (a structured dataset containing twitter handle data).,"ANALYZE, DATA DISCLOSURE, NON COMPLIANCE, PERFORMANCE, TOOL BENCHMARK, AD-HOC DATASET"
10,YES,2022,Configurable Per-Query Data Minimization for Privacy-Compliant Web APIs,Pallas F.; Hartmann D.; Heinrich P.; Kipke J.; Grunewald E.,generate,"Data-providing Web APIs should support data minimization. The authors present a highly configurable solution for implementing legally compliant data minimization in GraphQL Web APIs. This additional functionality is integrated via schema directives comprising three advanced information reduction methods – generalization, noise, and hashing ","It conists of a ready-to-use extension to Apollo, one of the most widely used software stacks for building GraphQL APIs. Implemented as a collection of API schema directives that define post-processing steps to be executed on already resolved data fields before returning them through the API.",NONE,"Minimize, Abstract, and Hide",N/A,Graph QL specifications,Javascript,https://github.com/PrivacyEngineering/janus-graphql-anonym-directives,The framework is extensible with additional information reduction methods and custom access-control policies and attribute-based information reducition methods. Seems user-friendly,"No large-scele evaluation. The included data generalization methods are qute basic (e.g., do not include obfuscation nor diferential privacy).",Proof of concept,"GENERATE, PROOF OF CONCEPT, MACHINE LEARNING, PERFORMANCE, MINIMIZE, ABSTRACT, HIDE, GENERALIZABILITY, MANUAL EFFORT"
12,NO,2023,RuleKeeper: GDPR-Aware Personal Data Compliance for Web Frameworks,Ferreira M.; Brito T.; Santos J.F.; Santos N.,analyze,"GDPR-aware policy enforcement system for web framework. The tool utomatically generates the data protection policy of the website from a machine-readable GDPR manifest written by the developer. It uses a domain-specific language (DSL) for specifying the GDPR manifest. The tool also includes a static analysis tool that automatically checks for the presence of GDPR compliance bugs. Particularly, it generates a graph-based model of the JavaScript code and uses it along with the GDPR manifest to look for violations of GDPR’s purpose limitation and data minimization guidelines.","The tool implements a static code analysis pipeline that allows the web developer to verify if the policy reflects the way that the application behaves. This verification is performed in two steps. First, a code analysis tool generates a model of the application code which we designate Data Processing Graph (DPG). Then, a compliance verification tool will look for inconsistencies between the DPG and the GDPR manifest.
The tool also implements dynamic policy enforcement and consent management functions using two components: middleware and manager service.",Data Processing Graph (DPG),N/A,Data Disclosure and Non Compliance,Javascript,Javascript,https://github.com/rulekeeper/rulekeeper,"It allows for some compliance checking regarding purpose limitation, data minimization, and lawfulness (because the policy is defined by the developer), but cannot guarantee full compliance. ","The developer needs to debug either the application code or the GDPR manifest itself to resolve these inconsistencies. Modifications need to be checked manually. The static analysis part is quite innacurate.
Policies must be described on a Database level. In the end, you need to identify the data yourself (See Fig. 5, mapping planes)",Four (4) case studies to assess the performance of the tool. They also conducted usability and security studies.,"ANALYZE, DATA PROCESSING GRAPH, DATA DISCLOSURE, NON COMPLIANCE, CASE STUDIES, MANUAL EFFORT, PERFORMANCE, GENERALIZABILITY"
13,NO,2023,Helping Code Reviewer Prioritize: Pinpointing Personal Data and Its Processing,Tang F.; Østvold B.M.; Bruntink M.,analyze,"The goal is to find meaningful processing of personal data in code. Very clear in Section 3 (3.1). Also, check Section 3.1 (page 7) for the example of purpose composition.
The tool uses static analysis to identify personal data in code. There is a predifined set of personal data that can be defined out-of-the-box. These have Semgrep rules (regular expressions) already defined in the tool. Semgrep matches grammatical patterns on parsed programs (represented as an Abstract Syntax Tree (AST)) instead of matching string or regular expression (regex) patterns on the program as a string. It is also possible to define context-dependent rules for the identification of additional types of personal information. For this, the tool provides templates that users (developers/analysts) can instantiate. ",Static analysis,Abstract Syntax Trees,N/A,Data Disclosure and Non Compliance,"Java, JavaScript, and TypeScript",Python,NO,The collection of flow patterns helps in the sumarization of the results. This contributes to the usability of the tool. The output of the tool are produced in the Standard Static Analysis Results Interchange Format (SARIF).,"The personal data of interest must be defined for each context (e.g., banking). False positives (identification of sinks and personal data). Manual inspection is necesary. Inter-procedural analysis is excluded (see conclusions)",Four open-source applications (one per programming language). The evaluation is thorough and involves manual inspection,"STATIC ANALYSIS, ABSTRACT SYNTAX TREES, DATA DISCLOSURE, NON COMPLIANCE, ANALYZE, AD-HOC DATASET, USABILITY, MANUAL EFFORT, PERFORMANCE"
14,NO,2023,Extracting LPL privacy policy purposes from annotated web service source code,Hjerppe K.; Ruohonen J.; Leppänen V.,analyze,"A privacy policy for a web service is also a documentation of its behaviour concerning personal data processing. The goal is to reconstruct privacy policies (i.e., processing purposes) from annotated web service source code. Such reconstructed policies are expressed using formal language (called LPL) to make them machine readable.","Static analysis (based on [3] and extended for the Spring framework). The structure of the web services is represented with Petri nets. LPL is extended with ""Purpose"" to denote the reason and extent of the processing of personal data.",Same as [3] plus Petri nets for modelling the connections web services. This work is an extension for web services,N/A,Data Disclosure and Non Compliance,Java (Spring framework),Java,Same as [3],,"Practitioners must (1) annotate source code, (2) maintain data extraction tool infrastructure, and (3) compile the final privacy policies from the data. Not suitable for dynamically typed environments. It does not analye the code on the client side","Case study (medium size monolith architecture). Compliance is not evaluated, just the correlation between the extracted policies and code","ANALYZE, STATIC TAINT ANALYSIS, ABSTRACT SYNTAX TREE, DATA DISCLOSURE, NON COMPLIANCE, CASE STUDIES, MANUAL EFFORT, GENERALIZABILITY"
15,NO,2023,AI privacy toolkit,Goldsteen A.; Saadi O.; Shmelkin R.; Shachor S.; Razinkov N.,generate,Privacy and compliance of Artificial Intelligence (AI) models trained on personal data.,The toolking incorpotates two modules: anonymization and minimiazation. ,NONE,minimize and abstract,N/A,"DATASETS: NumPy arrays, Pandas DataFrames, PyTorch tensors. MODELS: scikit-learn, PyTorch, Keras, etc.",Python,https://github.com/IBM/ai-privacy-toolkit,Applicable to different datasets formats and model types. In a ML pipeline it is very clear what is personal data or not. The toolkit can be extended and it is maintained frquently.,The techniques are not generalizable to non-ML frameworks,A test suite (unit testis) is provided (see openssf best practices of the GitHub project),"GENERATE, AD-HOC DATASET, MINIMIZE, ABSTRACT, GENERALIZABILITY"
16,YES,2023,Privacy Property Graph: Towards Automated Privacy Threat Modeling via Static Graph-based Analysis,Kunz I.; Weiss K.; Schneider A.; Bande C.,analyze,"It automatically generates a data flow diagram from source code which exhibits privacy properties of data flows, and which can be analyzed semi-automatically via queries. Privacy threats are detected via these queries on the code property graph.",Static Analysis (taint tracking),"Code Property Graph (CPG). A CPG It merges AST, control flow graphs (CFG), and data flow graphs (DFG) into a unified, highly detailed graph representation. It is particularly useful for security analysis, vulnerability detection, and program comprehension.",N/A,all,Multiple programming languages (Python and Go),Unspecified,NO (To be added),Allows to identify privacy issues that would not be detectable as easily in a manually created data flow diagram.,"Manual annotations are necesary (specially identifiers and pseudo identifiers). Threats related to missing possibilities to erase or rectify personal data can therefore not be detected in the current state.
When applied to a large code base that has many transmissions which include personal data, the results may become too large for manual analysis.",A test suite is provided with 22 privacy threat implementations (86 test cases in total),"ANALYZE, STATIC TAINT ANALYSIS, ALL LINDDUN, AD-HOC DATASET, MANUAL EFFORT, SCALABILITY, CODE PROPERTY GRAPHS"
18,YES,2024,A Large Language Model Approach to Code and Privacy Policy Alignment,Morales G.; Pragyan K. C.; Jahan S.; Hosseini M. B.; Slavin R.,analyze,"They check for misalignments between privacy policies their actual implementation in Android apps. The approach uses event argument extraction to identify terms regarding data practices (e.g., information types, verbs, etc.) from privacy policies. Actual practices are extracted from the associated policy’s app through static taint analysis, in which API methods known to produce sensitive information are de- tected within the app code and analyzed to determine whether the information produced by the method leaves the device (i.e., the information is leaked). This is then used to determine whether the leaked information is represented in the privacy policy with the help of semantic similarity techniques","Large Language Models (for misalignment detection) and static TAINT analysis (for detecting privacy leaks in code).
For an arbitrary privacy policy and its corresponding Android app (APK file), its data leaks are extracted and compared to the data practices within the privacy policy.",ASTs and Control Flow Graphs (FlowDroid),N/A,Data Disclosure and Non Compliance,Android,Unspecified,Only dataset,No manual annotations needed,The analysis is limited to FlowDroid's list of sources and sinks. The F1 score for the semantic similarity task is rather average (0.51),50 privacy policies and their corresponding APK files. Only 5 used for testing (check),"ANALYZE, ABSTRACT SYNTAX TREES, AD-HOC DATASET, PERFORMANCE, DATA DISCLOSURE, NON-COMPLIANCE"
19,YES,2024,Finding Privacy-relevant Source Code,Tang F.; Østvold B.M.; ,analyze,"Our approach focuses on identifying privacy- relevant methods — specifically, Java methods or JavaScript functions commonly found in popular libraries — that are involved in the processing of personal data.",Static analysis. The approach is based on [13]. They use Semgrep rules to identify personal data in the code (variables and literal text). Then the corresponding methods are manually labelled with data processing categories,Call graphs and abstract syntax trees (from [13]),N/A,Data Disclosure and Non Compliance,Java and Javascript,Unspecified,NO,"They assessed privacy-relevan methods from 50 popular libraries (25 each for Java and JavaScript). Privacy-relevant methods inside standard libraries or third-party libraries are leveraged in many real-world applications. The approach is, therefore, generalisable to a great extent.","They target common methods used by popular libraries. Thereby, custom methods (i.e., from real-world applications) that operationalize these libraries can be flagged as privacy-relevant. New libraries must be manually inspected and the corresponding ranking of privacy-relevant methods updated periodically",Large scale analysis on 100 open-source applications,"CALL GRAPHS, ABSTRACT SYNTAXT TREES, SCALABILITY, ANALYZE, AD-HOC DATASET, DATA DISCLOSURE, NON COMPLIANCE"
